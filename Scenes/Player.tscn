[gd_scene load_steps=28 format=2]

[ext_resource path="res://Scenes/Models/GoldenGun.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/Models/pistol.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Models/rifle.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scenes/Models/dvaAnimated.tscn" type="PackedScene" id=4]
[ext_resource path="res://Scripts/GunViewport.gd" type="Script" id=5]
[ext_resource path="res://Scripts/Player.gd" type="Script" id=6]
[ext_resource path="res://Audio/Guns/shot.mp3" type="AudioStream" id=7]
[ext_resource path="res://Textures/GunFlash/gunFlash.png" type="Texture" id=8]
[ext_resource path="res://Scripts/ShaderOverlay.gd" type="Script" id=9]
[ext_resource path="res://Scripts/gunflash.gd" type="Script" id=10]
[ext_resource path="res://Scripts/Crosshair.gd" type="Script" id=11]

[sub_resource type="CapsuleShape" id=1]
radius = 0.3
height = 0.2

[sub_resource type="CubeMesh" id=2]
size = Vector3( 0.5, 0.5, 0.5 )

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0.94902, 0, 0, 1 )

[sub_resource type="PrismMesh" id=4]
size = Vector3( 0.1, 0.1, 0.1 )

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0, 1, 0.0627451, 1 )

[sub_resource type="Animation" id=6]
resource_name = "Idle"
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "Walk"
length = 1.4
loop = true
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.35, 1.05, 1.4 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0.03, 0, 0 ), Vector3( -0.03, 0, 0 ), Vector3( 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=8]
length = 0.05
step = 0.105
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=9]
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, -2.07724, 0 ), Vector3( 0, -2.07724, 0 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( -35.9917, -2.89011, 8.88111 ), Vector3( -35.9917, -2.89011, 8.88111 ), Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ), Vector3( 1, 1, 1 ), Vector3( 1, 1, 1 ), Vector3( 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=10]
length = 0.27
step = 0.03
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.03, 0.27 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 0, 0.2 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.03, 0.27 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 18.3928, -0.656444, -4.05298 ), Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.27 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ), Vector3( 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=11]
resource_name = "SwapIn"
length = 0.4
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, -2.07724, 0 ), Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( -35.9917, -2.89011, 8.88111 ), Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ), Vector3( 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=12]
resource_name = "SwapOut"
length = 0.6
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, -2.07724, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( -35.9917, -2.89011, 8.88111 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ), Vector3( 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform vec2 dims;
uniform int frame;
uniform int lastFrame;

void vertex() {
}

const float PI = 3.141592654;

void fragment() {
	COLOR = vec4(0.0, 0.0, 0.0, 0.0);
	
	float frac = float(frame) / float(220) * (1.0 / 0.50);
	
	float baseBoundary = float(dims.y) - frac * float(dims.y);
	float boundary = baseBoundary;
	
	float baseWave = sin((FRAGCOORD.x / float(dims.x)) * 8.0 * PI + 0.7); //sine wave
	float baseAmplitude = (1.0 / 5.0) * float(dims.y);
	float amplitude = min(baseAmplitude * (frac + 0.2), baseAmplitude);
	
	boundary += baseWave * amplitude;
	
	if (abs(boundary - FRAGCOORD.y) <= 0.005 * float(dims.y)) {
		COLOR = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	if (FRAGCOORD.y >= boundary) {
		float dist = abs(FRAGCOORD.y - baseBoundary);
		float bonus = min(dist / (float(dims.y) * 0.75), 1.0) * 0.5;
		COLOR = vec4(0.6, 0.0, 0.0, 0.5 + bonus);
	}
	
	if (frame > 210) {
		frac = min((float(frame - 210) / float(lastFrame - 210)), 1.0);
		COLOR = mix(vec4(0.6, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0), frac);
	}
	
	
}	
"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/dims = null
shader_param/frame = null
shader_param/lastFrame = null

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

uniform vec2 dims;
uniform float time;

void vertex() {
}

const float PI = 3.141592654;

const vec3 c_red = vec3(1.0, 0.0, 0.0);
const vec3 c_orange = vec3(1.0, 0.5, 0.0);
const vec3 c_yellow = vec3(1.0, 1.0, 0.0);
const vec3 c_green = vec3(0.0, 1.0, 0.0);
const vec3 c_blue = vec3(0.0, 0.0, 1.0);
const vec3 c_lblue = vec3(0.0, 1.0, 1.0);
const vec3 c_purple = vec3(0.5, 0.0, 1.0);
const vec3 c_pink = vec3(1.0, 0.5, 1.0);

vec3 getRainbow(float val, float minval, float maxval) {
	//0-7
	float range = maxval - minval;
	float normalized = 7.0 * ((val - minval) / range);
	if (normalized <= 1.0) {
		return mix(c_red, c_orange, normalized);
	}
	if (normalized <= 2.0) {
		return mix(c_orange, c_yellow, normalized - 1.0);
	}
	if (normalized <= 3.0) {
		return mix(c_yellow, c_green, normalized - 2.0);
	}
	if (normalized <= 4.0) {
		return mix(c_green, c_blue, normalized - 3.0);
	}
	if (normalized <= 5.0) {
		return mix(c_blue, c_lblue, normalized - 4.0);
	}
	if (normalized <= 6.0) {
		return mix(c_lblue, c_purple, normalized - 5.0);
	}
	return mix(c_purple, c_pink, normalized - 6.0);
}

bool inBox(vec2 point, vec4 bounds) {
	return point.x >= bounds.r && point.x <= bounds.b && point.y >= bounds.g && point.y <= bounds.a;
}

void fragment() {
	COLOR = vec4(0.0, 0.0, 0.0, 0.0);
	
	vec4 coord = FRAGCOORD;
	float cx = dims.x / 2.0;
	float cy = dims.y / 2.0;
	
	
	
	float gap = 5.0;
	float L = 8.0;
	float W = 1.8;
	float hScale = dims.x / 1024.0;
	float vScale = dims.y / 600.0;
	

	vec4 boxN = vec4(cx - hScale * (W / 2.0), cy + vScale * (gap), cx + hScale * (W / 2.0), cy + vScale * (gap + L));
	vec4 boxE = vec4(cx + hScale * (gap), cy - vScale * (W / 2.0), cx + hScale * (gap + L), cy + vScale * (W / 2.0));
	vec4 boxS = vec4(cx - hScale * (W / 2.0), cy - vScale * (gap + L), cx + hScale * (W / 2.0), cy - vScale * (gap));
	vec4 boxW = vec4(cx - hScale * (gap + L), cy - vScale * (W / 2.0), cx - hScale * (gap), cy + vScale * (W / 2.0));
	
	float outlineScale = 1.6;
	vec4 outlineOffset = vec4(-outlineScale * hScale, -outlineScale * vScale, outlineScale * hScale, outlineScale * vScale);
	
	vec2 coord2 = vec2(coord.x, coord.y);
	
	if (inBox(coord2, boxN) || inBox(coord2, boxE) || inBox(coord2, boxS) || inBox(coord2, boxW)) {
		COLOR = mix(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0), abs(cos(time / 1500.0 + FRAGCOORD.x * 8.0 / dims.x + FRAGCOORD.y * 8.0 / dims.y)));
	} else if (inBox(coord2, boxN + outlineOffset) || inBox(coord2, boxE + outlineOffset) || inBox(coord2, boxS + outlineOffset) || inBox(coord2, boxW + outlineOffset)) {
		COLOR = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	
	
}	
"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/dims = null
shader_param/time = null

[node name="Player" type="KinematicBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.8, 0 )
script = ExtResource( 6 )

[node name="SoundPlayer" type="AudioStreamPlayer3D" parent="."]
transform = Transform( 1, 0, -1.49012e-08, 0, 1, 0, 1.49012e-08, 0, 1, -1.49012e-08, 0, 2.98023e-08 )
stream = ExtResource( 7 )
unit_db = -10.0

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, -0.045144, 0 )
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, -0.2, 0 )
visible = false
mesh = SubResource( 2 )
material/0 = SubResource( 3 )

[node name="SnapRay" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, -4, 0 )

[node name="GroundRay" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, -0.455, 0 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.499, 0 )
cull_mask = 5

[node name="SelectRay" type="RayCast" parent="Camera"]
enabled = true
cast_to = Vector3( 0, 0, -200 )

[node name="ViewModel2" type="MeshInstance" parent="Camera"]
transform = Transform( 1, 0, 0, 0, 0.0817994, 0.996649, 0, -0.996649, 0.0817994, 0.825944, -0.163268, -1.06435 )
visible = false
layers = 2
mesh = SubResource( 4 )
material/0 = SubResource( 5 )

[node name="GCWalk" type="Spatial" parent="Camera"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera/GCWalk"]
anims/Idle = SubResource( 6 )
anims/Walk = SubResource( 7 )

[node name="GCTurn" type="Spatial" parent="Camera/GCWalk"]
transform = Transform( 0.0978148, 0, -0.0207912, 0, 0.1, 0, 0.0207912, 0, 0.0978148, 0.2, -0.2, -0.3 )

[node name="GCAnim" type="Spatial" parent="Camera/GCWalk/GCTurn"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera/GCWalk/GCTurn/GCAnim"]
anims/Idle = SubResource( 8 )
anims/Reload = SubResource( 9 )
anims/Shoot = SubResource( 10 )
anims/SwapIn = SubResource( 11 )
anims/SwapOut = SubResource( 12 )

[node name="GoldenGun" parent="Camera/GCWalk/GCTurn/GCAnim" instance=ExtResource( 1 )]
transform = Transform( 1, 1.49012e-08, -4.47035e-08, 7.45058e-09, 1, 0, -2.98023e-08, 2.98023e-08, 1, 0.0106211, 0.0679665, 0.0499637 )
visible = false

[node name="pistol" parent="Camera/GCWalk/GCTurn/GCAnim" instance=ExtResource( 2 )]
transform = Transform( 1, 0, -1.49012e-08, 0, 1, 0, 1.49012e-08, 0, 1, 0, 0, 0 )
visible = false

[node name="rifle" parent="Camera/GCWalk/GCTurn/GCAnim" instance=ExtResource( 3 )]
transform = Transform( 1, 0, -1.49012e-08, 0, 1, 0, 1.49012e-08, 0, 1, 0, 0, 0 )
visible = false

[node name="flash" type="Sprite3D" parent="Camera/GCWalk/GCTurn/GCAnim"]
transform = Transform( 1, 0, -1.49012e-08, 0, 1, 0, 1.49012e-08, 0, 1, 1.91057, 0, 8.98852 )
visible = false
layers = 2
billboard = 1
texture = ExtResource( 8 )
script = ExtResource( 10 )

[node name="ViewportContainer" type="ViewportContainer" parent="Camera"]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="Camera/ViewportContainer"]
size = Vector2( 1024, 700 )
transparent_bg = true
handle_input_locally = false
render_target_update_mode = 3
shadow_atlas_size = 4096
shadow_atlas_quad_0 = 1
script = ExtResource( 5 )

[node name="GunCamera" type="Camera" parent="Camera/ViewportContainer/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.29891, 0 )
cull_mask = 2

[node name="ShaderOverlay" type="ColorRect" parent="."]
material = SubResource( 14 )
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Crosshair" type="ColorRect" parent="."]
material = SubResource( 16 )
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 11 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="playerModel" parent="." instance=ExtResource( 4 )]
transform = Transform( -0.1, 0, -8.74228e-09, 0, 0.1, 0, 8.74228e-09, 0, -0.1, 0, -0.474562, 0 )

[node name="CModelFlash" type="Sprite3D" parent="playerModel"]
visible = false
billboard = 1
texture = ExtResource( 8 )
script = ExtResource( 10 )
